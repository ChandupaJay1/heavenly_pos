/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Arrays;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;

public class userhome extends javax.swing.JFrame {

    private String currentUserId;
    private String currentUserName;

    public userhome() {
        initComponents();
        setLocationRelativeTo(null);
        initializeForm();
    }

    public userhome(String userid, String username) {
        initComponents();
        setLocationRelativeTo(null);
        this.currentUserId = userid;
        this.currentUserName = username;
        initializeForm();
    }

    private void initializeForm() {
        invoiceid();
        loadtable();
        buttongroup();
        startDateTimeUpdater();
        jTextField4.setText("0.00");
        jTextField5.setText("0.00");
        jTextField6.setText("0.00");
    }

    // Method to update date and time labels
    private void startDateTimeUpdater() {
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
                txtdate.setText(now.format(dateFormatter));
                txttime.setText(now.format(timeFormatter));
            }
        });
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txttime = new javax.swing.JLabel();
        txtdate = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 0, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("INVOICE");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Item Name ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, -1, -1));

        txttime.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txttime.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(txttime, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 10, 350, 50));

        txtdate.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txtdate.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(txtdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 340, 60));

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 90, 180, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Inoice ID");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, -1, -1));

        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 90, 180, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        jLabel4.setText("KOT");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 620, -1, -1));

        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 180, -1));

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Category", "Name", "Portion", "Price"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 1150, 200));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Item Code ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Items");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, -1));

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] {"ID", "Name", "Portion", "Count", "Price", "Total"}
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 1150, 200));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Remove Item");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 610, 120, -1));

        jRadioButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jRadioButton1.setText("Dine in");
        getContentPane().add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 380, -1, -1));

        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Take away");
        getContentPane().add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 380, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setText("Balance :");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 740, -1, -1));

        jTextField4.setEditable(false);
        jTextField4.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(0, 0, 204));
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 730, 210, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Sub Total :");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 740, -1, -1));

        jTextField5.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(0, 0, 204));
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 730, 210, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Paid  :");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 740, -1, -1));

        jTextField6.setEditable(false);
        jTextField6.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(0, 0, 204));
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 730, 210, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 153, 51));
        jButton3.setText("Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 660, 110, 40));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        jLabel10.setText("Ordered Items");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        closeconfirm();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // This method is for filtering non-alphabetic characters.
        // The actual search logic is better placed in keyReleased.
        char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || Character.isWhitespace(c) || Character.isISOControl(c))) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            String searchText = jTextField1.getText() + "%";
            String sql = "SELECT p.idproducts, c.categoryname, p.name, p.portion, p.price "
                    + "FROM products p LEFT JOIN category c ON p.category_idcategory = c.idcategory "
                    + "WHERE (p.name LIKE ? OR p.idproducts LIKE ?) "
                    + "AND p.status IN ('active', 'done')";

            try (Connection conn = DB.database.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setString(1, searchText);
                pstmt.setString(2, searchText);

                try (ResultSet rs = pstmt.executeQuery()) {
                    while (rs.next()) {
                        Vector<String> v = new Vector<>();
                        v.add(rs.getString("idproducts"));

                        String category = rs.getString("categoryname");
                        v.add(category != null ? category : "Uncategorized");

                        v.add(rs.getString("name"));
                        v.add(rs.getString("portion"));
                        v.add(String.format("%.2f", rs.getDouble("price")));
                        dtm.addRow(v);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error searching products: " + e.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // Invoice ID is auto-generated and set to non-editable, so this might not be needed.
        char c = evt.getKeyChar();
        if (Character.isAlphabetic(c)) {
            evt.consume();
        } else {

        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // This is typically for when the user presses Enter in the text field.
        // You might want to trigger the search here as well, or just let keyReleased handle it.
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // Invoice ID is auto-generated and set to non-editable, so this method won't be triggered by user input.
        // If it was editable, this could trigger a search for an existing invoice.
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || Character.isISOControl(c))) { // Allow digits and control characters (like backspace)
            evt.consume();
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            try {
                Object idValue = jTable1.getValueAt(selectedRow, 0);
                Object nameValue = jTable1.getValueAt(selectedRow, 2);
                Object portionValue = jTable1.getValueAt(selectedRow, 3);
                Object unitPriceValue = jTable1.getValueAt(selectedRow, 4);

                if (idValue != null && nameValue != null && portionValue != null && unitPriceValue != null) {
                    String id = idValue.toString();
                    String name = nameValue.toString();
                    String portion = portionValue.toString();
                    double unitPrice = Double.parseDouble(unitPriceValue.toString());

                    String itemCountStr = JOptionPane.showInputDialog(null,
                            "Enter Item Count for " + name,
                            "Enter Item Count",
                            JOptionPane.QUESTION_MESSAGE);

                    if (itemCountStr != null && !itemCountStr.trim().isEmpty()) {
                        int itemCount = Integer.parseInt(itemCountStr.trim());
                        if (itemCount <= 0) {
                            JOptionPane.showMessageDialog(this,
                                    "Item count must be positive.",
                                    "Invalid Input", JOptionPane.WARNING_MESSAGE);
                            return;
                        }

                        double totalItemPrice = unitPrice * itemCount;

                        DefaultTableModel dtm1 = (DefaultTableModel) jTable2.getModel();

                        // Check if item already exists in the order
                        boolean itemExists = false;
                        for (int i = 0; i < dtm1.getRowCount(); i++) {
                            String existingId = dtm1.getValueAt(i, 0).toString();
                            String existingPortion = dtm1.getValueAt(i, 2).toString();
                            if (existingId.equals(id) && existingPortion.equals(portion)) {
                                // Update existing item
                                int currentCount = Integer.parseInt(dtm1.getValueAt(i, 3).toString());
                                dtm1.setValueAt(currentCount + itemCount, i, 3);
                                dtm1.setValueAt(unitPrice * (currentCount + itemCount), i, 5);
                                itemExists = true;
                                break;
                            }
                        }

                        if (!itemExists) {
                            // Add new item
                            Vector<Object> v = new Vector<>();
                            v.add(id);
                            v.add(name);
                            v.add(portion);
                            v.add(itemCount);
                            v.add(unitPrice);
                            v.add(totalItemPrice);
                            dtm1.addRow(v);
                        }

                        CountSubTotal();
                        jTextField5.grabFocus();
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "Invalid item count. Please enter a number.",
                        "Input Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Error adding item: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // This refreshes the product table when clicking anywhere on the form.
        // You might want to reconsider this behavior if it's too frequent.
        loadtable();
    }//GEN-LAST:event_formMouseClicked

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!jTextField2.getText().isEmpty()) {
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                dtm.setRowCount(0);

                String sql = "SELECT p.idproducts, c.categoryname, p.name, p.portion, p.price "
                        + "FROM products p LEFT JOIN category c ON p.category_idcategory = c.idcategory "
                        + "WHERE p.idproducts = ? AND p.status IN ('active', 'done')";

                try (Connection conn = DB.database.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

                    pstmt.setString(1, jTextField2.getText());

                    try (ResultSet rs = pstmt.executeQuery()) {
                        if (rs.next()) {
                            Vector<String> v = new Vector<>();
                            v.add(rs.getString("idproducts"));

                            String category = rs.getString("categoryname");
                            v.add(category != null ? category : "Uncategorized");

                            v.add(rs.getString("name"));
                            v.add(rs.getString("portion"));
                            v.add(String.format("%.2f", rs.getDouble("price")));
                            dtm.addRow(v);
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "No product found with ID: " + jTextField2.getText(),
                                    "Not Found", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Error searching product: " + e.getMessage(),
                        "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            loadtable();
        }
    }

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // No specific action implemented for clicking on ordered items table.
        // You could potentially add functionality to edit item quantity or remove from here.
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable2.getSelectedRow();

        if (selectedRow != -1) {
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.removeRow(selectedRow);
            JOptionPane.showMessageDialog(this, "Item Removed.");
            CountSubTotal(); // Recalculate subtotal after removal
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to remove.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
        char c = evt.getKeyChar();
        // Allow digits, decimal point, and control characters (like backspace)
        if (!(Character.isDigit(c) || c == '.' || Character.isISOControl(c))) {
            evt.consume();
        }
        // Ensure only one decimal point
        if (c == '.' && jTextField5.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jTextField5KeyReleased(java.awt.event.KeyEvent evt) {
        // Calculate balance as user types in Paid field
        try {
            double subtotal = Double.parseDouble(jTextField4.getText());
            double paidAmount = 0.0;
            if (!jTextField5.getText().isEmpty() && !jTextField5.getText().equals(".")) {
                paidAmount = Double.parseDouble(jTextField5.getText());
            }
            // REMOVED SERVICE CHARGE CALCULATION
            double totalDue = subtotal; // Now total is just subtotal
            double balance = paidAmount - totalDue;
            jTextField6.setText(String.format("%.2f", balance));
        } catch (NumberFormatException e) {
            jTextField6.setText("0.00");
        }
    }


    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped
        // Balance field is read-only, so this method should not contain input validation.
    }//GEN-LAST:event_jTextField6KeyTyped


    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {
        if (!jTextField5.getText().isEmpty()) {
            try {
                double subtotal = Double.parseDouble(jTextField4.getText());
                double paidAmount = Double.parseDouble(jTextField5.getText());
                // REMOVED SERVICE CHARGE CALCULATION
                double totalDue = subtotal; // Now total is just subtotal
                double balance = paidAmount - totalDue;
                jTextField6.setText(String.format("%.2f", balance));
                jButton3.grabFocus();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid amount entered for Paid.", "Input Error", JOptionPane.ERROR_MESSAGE);
                jTextField5.setText("0.00");
                jTextField6.setText("0.00");
            }
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Please add items to the order before printing.",
                    "Empty Order", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            registerCustomFonts();

            // Calculate financial values
            double subtotal = Double.parseDouble(jTextField4.getText());
            double paidAmount = Double.parseDouble(jTextField5.getText());
            double balance = paidAmount - subtotal;

            // Update the balance field in the UI BEFORE printing
            jTextField6.setText(String.format("%.2f", balance));

            // Validate payment
            if (paidAmount < subtotal) {
                JOptionPane.showMessageDialog(this,
                        "Paid amount is less than the total (" + String.format("%.2f", subtotal) + ").",
                        "Insufficient Payment", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Save invoice to database
            if (!saveInvoice()) {
                JOptionPane.showMessageDialog(this, "Failed to save invoice data.",
                        "Save Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Prepare report parameters
            Map<String, Object> parameters = new HashMap<>();
            parameters.put("Parameter6", jTextField3.getText());  // Bill No
            parameters.put("Parameter9", txtdate.getText() + " " + txttime.getText());  // Date & Time
            parameters.put("Parameter1", String.format("%.2f", subtotal));  // Total
            parameters.put("Parameter4", String.format("%.2f", paidAmount));  // Paid Amount
            parameters.put("Parameter5", String.format("%.2f", balance));  // Balance

            // Try alternative parameter names for balance
            parameters.put("Balance", String.format("%.2f", balance));
            parameters.put("BALANCE", String.format("%.2f", balance));

            parameters.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);

            // Create data model with columns that match your template
            DefaultTableModel reportModel = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{"Name", "Category", "Portion", "Count", "Price"}
            ) {
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    switch (columnIndex) {
                        case 3: return Integer.class;    // Count
                        case 4: return Double.class;    // Price
                        default: return String.class;
                    }
                }
            };

            // Add items to report model
            for (int i = 0; i < model.getRowCount(); i++) {
                try {
                    String productId = model.getValueAt(i, 0).toString();
                    String productName = model.getValueAt(i, 1).toString();
                    String portion = model.getValueAt(i, 2).toString();
                    int count = Integer.parseInt(model.getValueAt(i, 3).toString());
                    double price = Double.parseDouble(model.getValueAt(i, 4).toString());

                    String category = findCategoryForProduct(productId);
                    if (category == null) {
                        category = "Uncategorized";
                    }

                    reportModel.addRow(new Object[]{
                            productName,
                            category,
                            portion,
                            count,
                            price
                    });
                } catch (Exception e) {
                    System.err.println("Error processing row " + i + ": " + e.getMessage());
                    e.printStackTrace();
                }
            }

            // Load and generate report
            InputStream reportStream = getReportStream();
            if (reportStream == null) {
                JOptionPane.showMessageDialog(this,
                        "Report template not found",
                        "Report Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                JasperPrint print = JasperFillManager.fillReport(reportStream, parameters,
                        new JRTableModelDataSource(reportModel));

                if (print.getPages().size() == 0) {
                    JOptionPane.showMessageDialog(this,
                            "Report generated but has no pages. Check your data and template.",
                            "Report Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Display the report
                JasperViewer viewer = new JasperViewer(print, false);
                viewer.setTitle("Invoice #" + jTextField3.getText());
                viewer.setVisible(true);

                // Clear form after successful printing
                clearForm();
            } finally {
                if (reportStream != null) {
                    try {
                        reportStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error generating report: " + e.getMessage(),
                    "Report Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String findCategoryForProduct(String productId) {
        String category = "Uncategorized";
        try (Connection conn = DB.database.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT c.categoryname FROM products p " +
                             "LEFT JOIN category c ON p.category_idcategory = c.idcategory " +
                             "WHERE p.idproducts = ?")) {

            pstmt.setString(1, productId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    category = rs.getString("categoryname");
                    if (category == null) {
                        category = "Uncategorized";
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error retrieving product category: " + e.getMessage(),
                    "Database Error", JOptionPane.WARNING_MESSAGE);
        }
        return category;
    }

    private boolean saveInvoice() {
        Connection conn = null;
        try {
            if (currentUserId == null || currentUserId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "User ID not available. Cannot save invoice.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            // Calculate values - removed service charge
            double subtotal = Double.parseDouble(jTextField4.getText());
            double totalDue = subtotal; // Now total is just subtotal
            double paidAmount = Double.parseDouble(jTextField5.getText());
            double balance = paidAmount - totalDue;
            String invoiceNumber = jTextField3.getText();
            int isDineIn = jRadioButton1.isSelected() ? 1 : 0;

            conn = DB.database.getConnection();
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Database connection failed.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            conn.setAutoCommit(false);

            // Updated SQL to remove service_charge column
            String invoiceSql = "INSERT INTO invoice (invoice_number, user_id, subtotal, total, paid, balance, is_dine_in, created_at) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, NOW())";

            int invoiceId = -1;
            try (PreparedStatement pstmt = conn.prepareStatement(invoiceSql, PreparedStatement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, invoiceNumber);
                pstmt.setInt(2, Integer.parseInt(currentUserId));
                pstmt.setDouble(3, subtotal);
                pstmt.setDouble(4, totalDue);
                pstmt.setDouble(5, paidAmount);
                pstmt.setDouble(6, balance);
                pstmt.setInt(7, isDineIn);
                pstmt.executeUpdate();

                // Get the auto-generated invoice ID
                try (ResultSet rs = pstmt.getGeneratedKeys()) {
                    if (rs.next()) {
                        invoiceId = rs.getInt(1);
                    } else {
                        throw new SQLException("Failed to get generated invoice ID");
                    }
                }
            }

            // Save invoice items
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            String itemSql = "INSERT INTO invoice_item (invoice_id, product_id, product_name, portion, quantity, unit_price, total_price) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?)";

            try (PreparedStatement pstmt = conn.prepareStatement(itemSql)) {
                for (int i = 0; i < model.getRowCount(); i++) {
                    String itemId = model.getValueAt(i, 0).toString();
                    String itemName = model.getValueAt(i, 1).toString();
                    String portion = model.getValueAt(i, 2).toString();
                    int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());
                    double unitPrice = Double.parseDouble(model.getValueAt(i, 4).toString());
                    double totalItemPrice = Double.parseDouble(model.getValueAt(i, 5).toString());

                    pstmt.setInt(1, invoiceId);
                    pstmt.setString(2, itemId);
                    pstmt.setString(3, itemName);
                    pstmt.setString(4, portion);
                    pstmt.setInt(5, quantity);
                    pstmt.setDouble(6, unitPrice);
                    pstmt.setDouble(7, totalItemPrice);
                    pstmt.addBatch();
                }
                pstmt.executeBatch();
            }

            conn.commit();
            return true;

        } catch (Exception e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error saving invoice to database: " + e.getMessage(),
                    "Database Save Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private InputStream getReportStream() {
        // Try multiple locations for the report template
        String[] pathsToTry = {
            "/reports/heavenly_new_1.jasper",
            "reports/heavenly_new_1.jasper",
            "src/reports/heavenly_new_1.jasper"
        };

        for (String path : pathsToTry) {
            try {
                InputStream stream = getClass().getResourceAsStream(path);
                if (stream != null) {
                    return stream;
                }

                // Try filesystem if not found in resources
                java.io.File file = new java.io.File(path);
                if (file.exists()) {
                    return new java.io.FileInputStream(file);
                }
            } catch (Exception e) {
                System.out.println("Error checking path: " + path);
            }
        }
        return null;
    }

    private void closeconfirm() {
        int option = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to logout?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
        );

        if (option == JOptionPane.YES_OPTION) {
            this.dispose(); // Close current window
            new login().setVisible(true); // Open login window
        }
    }

    private void invoiceid() {
        try {
            // Get the maximum invoice ID and increment it
            // Corrected 'idinvoice' to 'id' based on your ERD
            ResultSet r = DB.database.search("SELECT MAX(id) AS max_id FROM invoice");

            int nextInvoiceId = 1; // Default starting ID
            if (r.next()) {
                int maxId = r.getInt("max_id");
                if (!r.wasNull()) { // Check if max_id was actually a number (not null)
                    nextInvoiceId = maxId + 1;
                }
            }
            jTextField3.setText(String.valueOf(nextInvoiceId)); // Set the invoice ID
            jTextField2.setText(null);
            jTextField1.setText(null);
            jTextField1.grabFocus();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error generating invoice ID: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadtable() {
        try {
            System.out.println("Attempting to load products...");

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            // Modified query to handle both 'active' and 'done' statuses
            String sql = "SELECT p.idproducts, c.categoryname, p.name, p.portion, p.price "
                    + "FROM products p LEFT JOIN category c ON p.category_idcategory = c.idcategory "
                    + "WHERE p.status IN ('active', 'done')";

            System.out.println("Executing SQL: " + sql);

            try (Connection conn = DB.database.getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql); ResultSet rs = pstmt.executeQuery()) {

                int count = 0;
                while (rs.next()) {
                    count++;
                    Vector<String> v = new Vector<>();
                    v.add(rs.getString("idproducts"));

                    // Handle possible null category
                    String category = rs.getString("categoryname");
                    v.add(category != null ? category : "Uncategorized");

                    v.add(rs.getString("name"));
                    v.add(rs.getString("portion"));
                    v.add(String.format("%.2f", rs.getDouble("price")));
                    dtm.addRow(v);
                }

                System.out.println("Loaded " + count + " products");
                if (count == 0) {
                    JOptionPane.showMessageDialog(this,
                            "No products found in database. Please check if products exist and have 'active' or 'done' status.",
                            "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException e) {
                System.err.println("SQL Error loading products:");
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Database error loading products: " + e.getMessage(),
                        "Database Error", JOptionPane.ERROR_MESSAGE);

                // Additional debug for connection issues
                try {
                    Connection testConn = DB.database.getConnection();
                    if (testConn == null || testConn.isClosed()) {
                        System.err.println("Database connection is closed or null");
                    } else {
                        System.out.println("Connection test successful");
                    }
                } catch (SQLException ex) {
                    System.err.println("Connection test failed:");
                    ex.printStackTrace();
                }
            }

            jTextField1.setText("");
            jTextField2.setText("");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Unexpected error loading products: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buttongroup() {
        ButtonGroup bg = new ButtonGroup();
        bg.add(jRadioButton1);
        bg.add(jRadioButton2);
    }

    private void CountSubTotal() {
        double sum = 0;
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                // Get quantity and unit price
                int quantity = Integer.parseInt(model.getValueAt(i, 3).toString());
                double unitPrice = Double.parseDouble(model.getValueAt(i, 4).toString());

                // Calculate total for this row
                double rowTotal = quantity * unitPrice;
                sum += rowTotal;
            } catch (Exception e) {
                System.err.println("Error calculating subtotal for row " + i);
                e.printStackTrace();
            }
        }

        jTextField4.setText(String.format("%.2f", sum));
        jTextField5.setText("0.00");
        jTextField6.setText("0.00");
    }

    private void clearForm() {
        // Clear ordered items table
        DefaultTableModel orderedItemsModel = (DefaultTableModel) jTable2.getModel();
        orderedItemsModel.setRowCount(0);

        // Clear text fields
        jTextField4.setText("0.00"); // Sub Total
        jTextField5.setText("0.00"); // Paid
        jTextField6.setText("0.00"); // Balance
        jTextField1.setText(""); // Item Name search
        jTextField2.setText(""); // Item Code search

        // Regenerate invoice ID for the next transaction
        invoiceid();

        // Reload the main products table
        loadtable();

        // Set default radio button
        jRadioButton2.setSelected(true); // Take away
    }

    private void registerCustomFonts() {
        try {
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();

            // Load Poppins font from resources
            InputStream fontStream = getClass().getResourceAsStream("/fonts/Poppins-Regular.ttf");
            if (fontStream != null) {
                Font poppinsFont = Font.createFont(Font.TRUETYPE_FONT, fontStream);
                ge.registerFont(poppinsFont);
                System.out.println("Poppins font registered successfully");

                // Set the font as a system property for JasperReports
                System.setProperty("jasper.reports.compile.temporary", "true");
                System.setProperty("net.sf.jasperreports.awt.ignore.missing.font", "true");
            } else {
                System.out.println("Poppins font file not found in resources");
                // Fall back to a standard font
                JOptionPane.showMessageDialog(this,
                        "Poppins font not found. Using default font for reports.",
                        "Font Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            System.err.println("Error registering custom fonts: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(userhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(userhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(userhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(userhome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // For testing, you can pass dummy user ID and name, or ensure login sets it.
                new userhome("1", "AdminUser").setVisible(true); // Example: Pass a default user ID and name
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JLabel txtdate;
    private javax.swing.JLabel txttime;
    // End of variables declaration//GEN-END:variables
}
